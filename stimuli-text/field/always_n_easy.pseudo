 // assume offset is 0 on entry
 name = alloc();
 idnum = alloc();
 identifier = alloc();
 *name = PUBLIC;
 *idnum = SENSITIVE;
 if (offset == 0) {
     *identifier = idnum; }
 if (offset == 1) {
     *identifier = name; }
 data = *identifier;
 print(*data);


 ***** MODEL A *****
 name: ->Mem1              
 idnum: ->Mem2             
 identifier: ->Mem3        
 offset: ?
 data: ->Mem1, ->Mem2

 Mem1: PUBLIC
 Mem2: SENSITIVE
 Mem3: ->Mem1, ->Mem2


 ***** MODEL B *****
 name: ->Mem1              
 idnum: ->Mem2             
 identifier: ->Mem3        
 offset: 0
 data: ->Mem2

 Mem1: PUBLIC
 Mem2: SENSITIVE
 Mem3: ->Mem2


This example is inspired by a base object that has two fields, the first of which contains SENSITIVE data and the second of which contains PUBLIC data. We set the fields directly, then use the base object to access them. We force flow to model accessing and printing the first field, which will ALWAYS print SENSITIVE data.
