 // cnd is unknown on entry to this fragment
 a1 = alloc();
 a2 = alloc();
 a3 = alloc();
 b1 = a2;
 b2 = a2;
 *a1 = PUBLIC;
 *a2 = SENSITIVE;
 *a3 = a2;
 if (cnd == 0) {
     *a3 = a1; }
 if (cnd == 1) {
     *a3 = a2; }
 if (cnd == 2) {
     *a3 = a2; }
 pp1 = a3;
 p2 = *pp1;
 if (cnd == 2) {
     b2 = p2; }
 if (cnd == 1) {
     b1 = p2; }
 if (cnd == 0) {
     b2 = p2; }
 print(*b2);


 ***** MODEL A *****
 a1: ->Mem1          
 a2: ->Mem2          
 a3: ->Mem3          
 b1: ->Mem1, ->Mem2
 b2: ->Mem1, ->Mem2
 cond: ?
 pp1: ->Mem3
 p2: ->Mem1, ->Mem2 

 Mem1: PUBLIC
 Mem2: SENSITIVE
 Mem3: ->Mem1, ->Mem2


 ***** MODEL B *****
 a1: ->Mem1          
 a2: ->Mem2          
 a3: ->Mem3          
 b1: ->Mem2
 b2: ->Mem1, ->Mem2
 cond: ?
 pp1: ->Mem3
 p2: ->Mem1, ->Mem2

 Mem1: PUBLIC
 Mem2: SENSITIVE
 Mem3: ->Mem1, ->Mem2


** Need more information about the value of cnd.

This is inspired by the identity function call made from 3 sites where the calling code is pass by reference instead of pass by value. If called from site 0, the function is called with PUBLIC data that is printed. If called from site 1, the function is called with SENSITIVE data that is not printed. If called from call site 2, the function is called with SENSITIVE data that is printed. However, this problem has an indeterminate answer because we do not know if call site 2 is even possible (if cnd can be anything but 0 and 1). Thus this example SOMETIMES prints SENSITIVE data, depending on cnd. 
